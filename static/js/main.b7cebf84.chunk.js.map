{"version":3,"sources":["components/Section/Section.module.css","components/Statistics/StatisticsListItem/StatisticsListItem.module.css","components/Statistics/Statistics.module.css","components/FeedbackOpt/FeedbackOptionButton/FeedbackOptionButton.module.css","components/Section/Section.jsx","components/Statistics/StatisticsListItem/StatisticsListItem.jsx","components/NotificationMessage/NotificationMessage.jsx","components/Statistics/Statistics.jsx","components/FeedbackOpt/FeedbackOptionButton/FeedbackOptionButton.jsx","components/FeedbackOpt/FeedbackOptions.jsx","components/Utils/Button/Button.jsx","components/App.js","index.js"],"names":["module","exports","Section","title","children","className","styles","StatisticsListItem","name","value","valueCorrection","NotificationMessage","message","defaultProps","Statistics","statisticsItems","StatListClasses","StatisticsList","join","statisticsItemsArr","Object","entries","console","log","isFeedbackExist","values","find","map","item","FeedbackOptionButton","optionName","optionHandler","feedbackOptionButtonClasses","FeedbackButton","id","type","onClick","FeedbackOptions","options","onLeaveFeedback","option","Button","onReset","INITIAL_STATE","good","neutral","bad","App","state","handleClick","event","currentActiveBtnId","target","setState","prevState","resetStatistics","countTotalFeedback","items","reduce","acc","countPositiveFeedbackPercentage","amount","Math","floor","this","FeedbackOptionsArr","keys","totalFeedback","PositiveFeedbackPercentage","total","positivePercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7cebf84.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__1MKwr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatisticsListItem\":\"StatisticsListItem_StatisticsListItem__3AKPJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatisticsListItem\":\"Statistics_StatisticsListItem__gOhF0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FeedbackButton\":\"FeedbackOptionButton_FeedbackButton__f3bFR\"};","//модули\r\nimport PropTypes from 'prop-types';\r\n\r\n//стили\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className={styles.Section}>\r\n      <h2 className=\"SectionTitle\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","//модули\r\nimport PropTypes from 'prop-types';\r\n\r\n//стили\r\nimport styles from './StatisticsListItem.module.css';\r\n\r\nconst StatisticsListItem = ({ name, value }) => {\r\n  const valueCorrection = name === 'positivePercentage' ? `${value} %` : value;\r\n  return (\r\n    <li className={styles.StatisticsListItem}>\r\n      {name}: {valueCorrection}\r\n    </li>\r\n  );\r\n};\r\n\r\nStatisticsListItem.propTypes = {\r\n  name: PropTypes.string,\r\n  value: PropTypes.number,\r\n};\r\n\r\nexport default StatisticsListItem;\r\n","//модули\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NotificationMessage = ({ message }) => (\r\n  <h2 className=\"SectionTitle\">{message}</h2>\r\n);\r\n\r\nNotificationMessage.defaultProps = {\r\n  message: 'No feedback given',\r\n};\r\n\r\nNotificationMessage.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default NotificationMessage;\r\n","//модули\r\nimport PropTypes from 'prop-types';\r\n\r\n//компоненты\r\nimport Section from '../Section';\r\nimport StatisticsListItem from '../Statistics/StatisticsListItem';\r\nimport NotificationMessage from '../NotificationMessage';\r\n\r\n//стили\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = statisticsItems => {\r\n  const StatListClasses = [styles.StatisticsList, 'List'].join(' ');\r\n  const statisticsItemsArr = Object.entries(statisticsItems);\r\n  console.log(statisticsItemsArr);\r\n  const isFeedbackExist = Object.values(statisticsItems).find(\r\n    value => value !== 0,\r\n  );\r\n  return (\r\n    <Section title={'Statistics'}>\r\n      {!!isFeedbackExist ? (\r\n        <ul className={StatListClasses}>\r\n          {statisticsItemsArr.map(item => {\r\n            return (\r\n              <StatisticsListItem\r\n                key={item[0]}\r\n                name={item[0]}\r\n                value={item[1]}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <NotificationMessage message=\"No feedback given\" />\r\n      )}\r\n    </Section>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  statisticsItems: PropTypes.object,\r\n};\r\n\r\nexport default Statistics;\r\n","//модули\r\nimport PropTypes from 'prop-types';\r\n\r\n//стили\r\nimport styles from './FeedbackOptionButton.module.css';\r\n\r\nconst FeedbackOptionButton = ({ optionName, optionHandler }) => {\r\n  const feedbackOptionButtonClasses = ['Button', styles.FeedbackButton].join(\r\n    ' ',\r\n  );\r\n  return (\r\n    <button\r\n      key={optionName}\r\n      id={optionName}\r\n      className={feedbackOptionButtonClasses}\r\n      type=\"button\"\r\n      onClick={optionHandler}\r\n    >\r\n      {optionName}\r\n    </button>\r\n  );\r\n};\r\n\r\nFeedbackOptionButton.propTypes = {\r\n  optionName: PropTypes.string,\r\n  optionHandler: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptionButton;\r\n","//модули\r\nimport PropTypes from 'prop-types';\r\n\r\n//компоненты\r\nimport Section from '../Section';\r\nimport FeedbackOptionButton from './FeedbackOptionButton';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <Section title={'Please Leave feedback'}>\r\n      <div className=\"FeedbackTabs\">\r\n        {options.map(option => {\r\n          return (\r\n            <FeedbackOptionButton\r\n              key={option}\r\n              optionName={option}\r\n              optionHandler={onLeaveFeedback}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </Section>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","//модули\r\nimport PropTypes from 'prop-types';\r\n\r\n//компоненты\r\nimport Section from '../../Section';\r\n\r\nconst Button = ({ onReset, children }) => {\r\n  return (\r\n    <Section>\r\n      <button type=\"button\" className=\"Button\" onClick={onReset}>\r\n        {children}\r\n      </button>\r\n    </Section>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  onReset: PropTypes.func,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Button;\r\n","// модули\nimport React, { Component } from 'react';\n\n// компоненты\nimport Statistics from '../components/Statistics';\nimport FeedbackOptions from '../components/FeedbackOpt';\nimport Button from '../components/Utils/Button';\n\nconst INITIAL_STATE = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n};\n\nclass App extends Component {\n  state = {\n    ...INITIAL_STATE,\n  };\n\n  handleClick = event => {\n    const currentActiveBtnId = event.target.id;\n\n    this.setState(prevState => {\n      if (currentActiveBtnId === 'good') {\n        return { good: prevState.good + 1 };\n      }\n      if (currentActiveBtnId === 'neutral') {\n        return { neutral: prevState.neutral + 1 };\n      }\n      if (currentActiveBtnId === 'bad') {\n        return { bad: prevState.bad + 1 };\n      }\n    });\n  };\n\n  resetStatistics = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  countTotalFeedback = items => {\n    const arrOfValues = Object.values(items);\n    const total = arrOfValues.reduce((acc, value) => acc + value, 0);\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = (value, amount) =>\n    Math.floor((value * 100) / amount);\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const FeedbackOptionsArr = Object.keys(this.state);\n    const totalFeedback = this.countTotalFeedback(this.state);\n    const PositiveFeedbackPercentage = this.countPositiveFeedbackPercentage(\n      good,\n      totalFeedback,\n    );\n\n    return (\n      <>\n        <FeedbackOptions\n          options={FeedbackOptionsArr}\n          onLeaveFeedback={this.handleClick}\n        />\n        ,\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={totalFeedback}\n          positivePercentage={PositiveFeedbackPercentage}\n        />\n        ,<Button onReset={this.resetStatistics}>Clear feedback</Button>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n//Стили\nimport './style.css';\nimport 'modern-normalize/modern-normalize.css';\n\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}